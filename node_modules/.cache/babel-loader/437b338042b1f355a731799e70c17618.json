{"ast":null,"code":"import axios from \"axios\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { getAllCountryListSuccess, getAllCountryListError } from \"../actions/countryAction\";\nimport * as actions from \"../constant\";\n\nconst getCountry = () => axios.get(\"https://restcountries.com/v3.1/all\");\n\nfunction* fetchCountrySaga() {\n  try {\n    const response = yield call(getCountry);\n    yield put(getAllCountryListSuccess({\n      country: response.data\n    }));\n  } catch (e) {\n    yield put(getAllCountryListError({\n      error: e.message\n    }));\n  }\n}\n\nfunction* countrySaga() {\n  yield all([takeLatest(actions.GET_ALL_COUNTRY_LIST_REQUEST, fetchCountrySaga), takeLatest(actions.GET_ALL_COUNTRY_LIST_REQUEST, fetchCountrySaga)]);\n}\n\nexport default countrySaga;","map":{"version":3,"names":["axios","all","call","put","takeLatest","getAllCountryListSuccess","getAllCountryListError","actions","getCountry","get","fetchCountrySaga","response","country","data","e","error","message","countrySaga","GET_ALL_COUNTRY_LIST_REQUEST"],"sources":["C:/Users/vridhi/Documents/rest-countries/src/redux/saga/countrySaga.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  getAllCountryListSuccess,\r\n  getAllCountryListError,\r\n} from \"../actions/countryAction\";\r\nimport * as actions from \"../constant\";\r\nimport { CTodo, ResponseGenerator } from \"../../types/country\";\r\n\r\nconst getCountry = () =>\r\n  axios.get<CTodo[]>(\"https://restcountries.com/v3.1/all\");\r\n\r\nfunction* fetchCountrySaga() {\r\n  try {\r\n    const response: ResponseGenerator = yield call(getCountry);\r\n    yield put(\r\n      getAllCountryListSuccess({\r\n        country: response.data,\r\n      })\r\n    );\r\n  } catch (e: any) {\r\n    yield put(\r\n      getAllCountryListError({\r\n        error: e.message,\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nfunction* countrySaga() {\r\n  yield all([\r\n    takeLatest(actions.GET_ALL_COUNTRY_LIST_REQUEST, fetchCountrySaga),\r\n    takeLatest(actions.GET_ALL_COUNTRY_LIST_REQUEST, fetchCountrySaga),\r\n  ]);\r\n}\r\n\r\nexport default countrySaga;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAEA,SACEC,wBADF,EAEEC,sBAFF,QAGO,0BAHP;AAIA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;;AAGA,MAAMC,UAAU,GAAG,MACjBR,KAAK,CAACS,GAAN,CAAmB,oCAAnB,CADF;;AAGA,UAAUC,gBAAV,GAA6B;EAC3B,IAAI;IACF,MAAMC,QAA2B,GAAG,MAAMT,IAAI,CAACM,UAAD,CAA9C;IACA,MAAML,GAAG,CACPE,wBAAwB,CAAC;MACvBO,OAAO,EAAED,QAAQ,CAACE;IADK,CAAD,CADjB,CAAT;EAKD,CAPD,CAOE,OAAOC,CAAP,EAAe;IACf,MAAMX,GAAG,CACPG,sBAAsB,CAAC;MACrBS,KAAK,EAAED,CAAC,CAACE;IADY,CAAD,CADf,CAAT;EAKD;AACF;;AAED,UAAUC,WAAV,GAAwB;EACtB,MAAMhB,GAAG,CAAC,CACRG,UAAU,CAACG,OAAO,CAACW,4BAAT,EAAuCR,gBAAvC,CADF,EAERN,UAAU,CAACG,OAAO,CAACW,4BAAT,EAAuCR,gBAAvC,CAFF,CAAD,CAAT;AAID;;AAED,eAAeO,WAAf"},"metadata":{},"sourceType":"module"}